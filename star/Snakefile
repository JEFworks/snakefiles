'''
star.snakefile
Kamil Slowikowski

Map paired-end RNA-seq reads and count genes with STAR
------------------------------------------------------

Requirements:

  samtools
      http://www.htslib.org/download/

  STAR
      https://github.com/alexdobin/STAR/releases

Usage: 

  snakemake --jobs 999 --cluster '../bsub.py -o stdout'
'''

from os.path import join, basename, dirname
from subprocess import check_output

# Globals ---------------------------------------------------------------------

configfile: 'config.yml'

# Full path to an uncompressed FASTA file with all chromosome sequences.
DNA = config['DNA']

# Full path to an uncompressed GTF file with all gene annotations.
GTF = config['GTF']

# Full path to a folder where intermediate output files will be created.
OUT_DIR = config['OUT_DIR']

# Samples and their corresponding filenames.
FILES = json.load(open(config['SAMPLES_JSON']))
SAMPLES = sorted(FILES.keys())

STAR_VERSION = check_output('STAR | grep versionSTAR', shell=True).split()[1]

# Functions -------------------------------------------------------------------

def rstrip(text, suffix):
    # Remove a suffix from a string.
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]

# Rules -----------------------------------------------------------------------

rule all:
    input:
        'counts.tsv.gz',
        'junctions.tsv.gz'

# Make an index of the genome for STAR.
rule star_index:
    input:
        dna = DNA
    output:
        index = join(dirname(DNA), 'star', 'Genome')
    log:
        join(dirname(DNA), 'star', 'star.index.log')
    benchmark:
        join(dirname(DNA), 'star', 'star.index.benchmark.tsv')
    version:
        STAR_VERSION
    threads:
        16
    resources:
        mem = 40000
    run:
        # Write stderr and stdout to the log file.
        shell('STAR'
              ' --runThreadN {threads}'
              ' --runMode genomeGenerate'
              ' --genomeDir ' + join(dirname(DNA), 'star') +
              ' --genomeFastaFiles {input.dna}'
              ' > {log} 2>&1')

# Merge multiple FASTQ files that correspond to a single sample.
# Also, ensure that the merged FASTQ has correctly paired mates.
# Unpaired mates are excluded from the merged FASTQ.
rule merge_fastqs:
    input:
        r1 = lambda wildcards: FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: FILES[wildcards.sample]['R2']
    output:
        r1 = join(OUT_DIR, '{sample}', '{sample}_R1.fastq.gz'),
        r2 = join(OUT_DIR, '{sample}', '{sample}_R2.fastq.gz')
    run:
        import gzip
        # Open the output file handles.
        out1 = gzip.open(output.r1, 'wb')
        out2 = gzip.open(output.r2, 'wb')
        # Yield a tuple for each read in the FASTQ file.
        def fastq_records(filename):
            with gzip.open(filename) as f:
                while True:
                    try:
                        name = f.readline()
                    except:
                        break
                    seq = f.readline()
                    sep = f.readline()
                    qual = f.readline()
                    yield (name.split()[0], name + seq + sep + qual)
        # Loop through all (R1,R2) pairs.
        for i in range(len(input.r1)):
            in1 = fastq_records(input.r1[i])
            in2 = fastq_records(input.r2[i])
            d1 = {}
            d2 = {}
            done1 = False
            done2 = False
            while not done1 or not done2:
                try:
                    n1, r1 = next(in1)
                    d1[n1] = r1
                except:
                    done1 = True
                try:
                    n2, r2 = next(in2)
                    d2[n2] = r2
                except:
                    done2 = True
                if not done1 and n1 in d2:
                    out1.write(d1[n1])
                    out2.write(d2[n1])
                    d1.pop(n1)
                    d2.pop(n1)
                if not done2 and n2 in d1:
                    out1.write(d1[n2])
                    out2.write(d2[n2])
                    d1.pop(n2)
                    d2.pop(n2)
        # Close the output file handles.
        out1.close()
        out2.close()

# 1. Map paired-end RNA-seq reads to the genome.
# 2. Count the number of reads supporting each splice junction.
# 3. Delete the output SAM file.
rule star_pass1:
    input:
        r1 = rules.merge_fastqs.output.r1,
        r2 = rules.merge_fastqs.output.r2,
        genomeDir = dirname(rules.star_index.output.index),
        gtf = GTF
    output:
        sam = temp(join(OUT_DIR, '{sample}', 'pass1', 'Aligned.out.sam')),
        sj = join(OUT_DIR, '{sample}', 'pass1', 'SJ.out.tab')
    log:
        join(OUT_DIR, '{sample}', 'pass1', 'star.map.log')
    benchmark:
        join(OUT_DIR, '{sample}', 'pass1', 'star.map.benchmark.tsv')
    version:
        STAR_VERSION
    threads:
        4
    resources:
        mem = 40000
    run:
        # Map reads with STAR.
        shell('cd ' + join(OUT_DIR, '{wildcards.sample}', 'pass1') +
              '&& STAR'
              ' --runThreadN {threads}'
              ' --genomeDir ' + join(dirname(DNA), 'star') +
              ' --sjdbGTFfile {input.gtf}'
              ' --readFilesCommand zcat'
              ' --readFilesIn {input.r1} {input.r2}'
              # By default, this prefix is "./".
              ' --outFileNamePrefix ' + join(OUT_DIR, '{wildcards.sample}', 'pass1') + '/'
              #
              # This option causes STAR to throw an error.
              # Output sorted by coordinate.
              # ' --outSAMtype BAM SortedByCoordinate'
              #
              # If exceeded, the read is considered unmapped.
              ' --outFilterMultimapNmax 20'
              # Minimum overhang for unannotated junctions.
              ' --alignSJoverhangMin 8'
              # Minimum overhang for annotated junctions.
              ' --alignSJDBoverhangMin 1'
              # Maximum number of mismatches per pair.
              ' --outFilterMismatchNmax 999'
              # Minimum intron length.
              ' --alignIntronMin 1'
              # Maximum intron length.
              ' --alignIntronMax 1000000'
              # Maximum genomic distance between mates.
              ' --alignMatesGapMax 1000000'
              ' > {log} 2>&1')

rule merge_splice_junctions:
    input:
        sjs = expand(join(OUT_DIR, '{sample}', 'pass1', 'SJ.out.tab'), sample = SAMPLES)
    output:
        sjs = join(OUT_DIR, 'SJ.out.pass1_merged.tab')
    log:
        join(OUT_DIR, 'merge_splice_junctions.log')
    shell:
        # Retain splice junctions with at least 3 uniquely mapped fragments
        # per sample.
        "cat {input.sjs} | awk '$7 >= 3' | cut -f1-4 | sort -u > {output.sjs}"

# 1. Map paired-end RNA-seq reads to the genome.
# 2. Make a coordinate sorted BAM with genomic coordinates.
# 3. Count the number of reads mapped to each gene.
# 4. Count the number of reads supporting each splice junction.
rule star_pass2:
    input:
        r1 = rules.merge_fastqs.output.r1,
        r2 = rules.merge_fastqs.output.r2,
        genomeDir = dirname(rules.star_index.output.index),
        gtf = GTF,
        sjs = rules.merge_splice_junctions.output.sjs
    output:
        sam = temp(join(OUT_DIR, '{sample}', 'pass2', 'Aligned.out.sam')),
        bam = join(OUT_DIR, '{sample}', 'pass2', 'Aligned.out.bam'),
        counts = join(OUT_DIR, '{sample}', 'pass2', 'ReadsPerGene.out.tab'),
        sj = join(OUT_DIR, '{sample}', 'pass2', 'SJ.out.tab')
    log:
        join(OUT_DIR, '{sample}', 'pass2', 'star.map.log')
    benchmark:
        join(OUT_DIR, '{sample}', 'pass2', 'star.map.benchmark.tsv')
    version:
        STAR_VERSION
    threads:
        4
    resources:
        mem = 40000
    run:
        # Map reads with STAR.
        shell('cd ' + join(OUT_DIR, '{wildcards.sample}', 'pass2') +
              '&& STAR'
              ' --runThreadN {threads}'
              ' --genomeDir ' + join(dirname(DNA), 'star') +
              ' --sjdbGTFfile {input.gtf}'
              ' --readFilesCommand zcat'
              ' --readFilesIn {input.r1} {input.r2}'
              # Multi-sample 2-pass alignment, sharing splice junctions across
              # samples.
              ' --sjdbFileChrStartEnd {input.sjs}'
              # Count fragments per gene, similar to HTseq.
              ' --quantMode GeneCounts'
              # By default, this prefix is "./".
              ' --outFileNamePrefix ' + join(OUT_DIR, '{wildcards.sample}', 'pass2') + '/'
              #
              # This option causes STAR to throw an error.
              # Output sorted by coordinate.
              # ' --outSAMtype BAM SortedByCoordinate'
              #
              # If exceeded, the read is considered unmapped.
              ' --outFilterMultimapNmax 20'
              # Minimum overhang for unannotated junctions.
              ' --alignSJoverhangMin 8'
              # Minimum overhang for annotated junctions.
              ' --alignSJDBoverhangMin 1'
              # Maximum number of mismatches per pair.
              ' --outFilterMismatchNmax 999'
              # Minimum intron length.
              ' --alignIntronMin 1'
              # Maximum intron length.
              ' --alignIntronMax 1000000'
              # Maximum genomic distance between mates.
              ' --alignMatesGapMax 1000000'
              ' > {log} 2>&1')
        # Convert to BAM and sort by coordinate.
        shell('samtools view -b {output.sam}'
              ' | samtools sort -@{threads} -l9 - ' + rstrip(output.bam, '.bam'))

rule collate_counts:
    input:
        expand(join(OUT_DIR, '{sample}', 'pass2', 'ReadsPerGene.out.tab'), sample = SAMPLES)
    output:
        'counts.tsv.gz'
    run:
        import gzip

        b = lambda x: bytes(x, 'UTF8')

        # Create the output file.
        with gzip.open(output[0], 'wb') as out:

            # Print the header.
            header = [b'sample', b'gene_id',
                b'counts_unstranded', b'counts_strand1', b'counts_strand2']
            out.write(b'\t'.join(header) + b'\n')

            for i in input:
                sample = basename(dirname(dirname(i)))
                for line in open(i):
                    fields = line.strip().split()
                    # Skip genes with 0 counts.
                    if int(fields[1]) > 0:
                        out.write(b(sample + '\t' + line))

rule collate_junctions:
    input:
        expand(join(OUT_DIR, '{sample}', 'pass2', 'SJ.out.tab'), sample = SAMPLES)
    output:
        'junctions.tsv.gz'
    run:
        import gzip

        b = lambda x: bytes(x, 'UTF8')

        # Create the output file.
        with gzip.open(output[0], 'wb') as out:

            # Print the header.
            header = [b'sample', b'chrom', b'intron_first', b'intron_last',
                b'strand', b'intron_motif', b'annotated', b'uniquely_mapped_reads',
                b'multimapped_reads', b'max_spliced_overhang']
            out.write(b'\t'.join(header) + b'\n')

            for i in input:
                sample = basename(dirname(dirname(i)))
                for line in open(i):
                    fields = line.strip().split()
                    # Skip splice junctions with 0 unique and 0 multimapped
                    # reads.
                    if int(fields[6]) > 0 or int(fields[7]) > 0:
                        out.write(b(sample + '\t' + line))

